.TH xmpp-bridge 1 "2017-05-22" "xmpp-bridge" "User Commands"
.PP
.SH NAME
xmpp-bridge \- connect command-line programs to XMPP
.PP
.SH SYNOPSIS
\fBxmpp-bridge\fR [\fIOPTION\fR]... [\fIARG\fR]...
.PP
.SH DESCRIPTION
.PP
Connect to an XMPP account and communicate with the specified peer. Text is
read from standard input and sent to the peer, and any messages received from
the peer will be printed on standard output. \fBxmpp-bridge\fR is intended to
be used as a building-block for other programs (or shell scripts) that want to
communicate status information over XMPP, or wish to ask for input over XMPP.
.PP
.SH ENVIRONMENT VARIABLES
.PP
The following environment variables need to be set when \fBxmpp-bridge\fR is
invoked.
.PP
.IP \fBXMPPBRIDGE_PEER_JID\fR 4
The XMPP address of the account that \fBxmpp-bridge\fR will communicate with. A
resource may optionally be included, to restrict communication to peers with a
matching resource.
.PP
.IP \fBXMPPBRIDGE_JID\fR 4
The XMPP address of the account that \fBxmpp-bridge\fR will sign into. A
resource may optionally be included to identify this instance of
\fBxmpp-bridge\fR.
.PP
.IP \fBXMPPBRIDGE_PASSWORD\fR 4
The password that belongs to that account.
.PP
.SH OPTIONS
.PP
.IP \fB--drop-privileges\fR 4
Change user and group to "nobody". This is the default when started as root.
.PP
.IP \fB--no-drop-privileges\fR 4
Do not change the user and group of this process. This is the default when not
started as root.
.PP
.IP \fB--show-delayed\fR 4
When the XMPP connection is established, the server may deliver stored messages
which were sent by the peer while \fBxmpp-bridge\fR was not connected. By
default, these delayed messages are dropped by \fBxmpp-bridge\fR, because
interactive scripts might be confused by messages that don't relate to the
current session. If the recipience of delayed messages is desired, this option
can be set.
.PP
.IP \fB--\fR 4
Do not interpret any subsequent arguments as options. This behavior is also implied
by any argument that does not start with \fB--\fR.
.PP
.SH ARGUMENTS
.PP
If further arguments are given, the command line formed by these arguments will
be executed in a child process. The original standard input and output of
\fBxmpp-bridge\fR will be closed, and a bidirectional pipe is set up between
\fBxmpp-bridge\fR and its child process, so that the child process' standard
output is transmitted to the peer, and the peer's messages become visible on
the child process's standard input.
.PP
The child process's standard error is the same as the standard error of
\fBxmpp-bridge\fR. If you want error messages from the child process to end up
in XMPP instead, close standard error and duplicate standard output. For
example, when the child process is a shell script, invoke "exec 2>&1" in it.
.PP
.SH NOTES
.PP
When any sort of error occurs, xmpp-bridge will report an error,
disconnect and exit immediately. Programs using xmpp-bridge should thus be
prepared to handle its sudden death gracefully at any time.
.PP
.SH EXAMPLE
.PP
Report the current date and time to user "peer@example.org" every 5 minutes:
.PP
.ft CW
.nf
.ne 3
\&    #!/bin/sh
\&    export XMPPBRIDGE_JID=datebot@example.org
\&    export XMPPBRIDGE_PEER_JID=peer@example.org
\&    export XMPPBRIDGE_PASSWORD=password
\&    while true; do
\&        sleep 300
\&        date
\&    done | xmpp-bridge
.ft
.fi
.PP
Receive and act on user input by wrapping a script in \fBxmpp-bridge\fR:
.PP
.ft CW
.nf
.ne 3
\&    $ cat > example.sh
\&    echo "What's your name?"
\&    read ANSWER
\&    echo "Hello $ANSWER."
\&    ^D
\&    $ export XMPPBRIDGE_JID=dialogsystem@example.org
\&    $ export XMPPBRIDGE_PEER_JID=peer@example.org
\&    $ export XMPPBRIDGE_PASSWORD=password
\&    $ xmpp-bridge bash example.sh
.ft
.fi
.PP
.SH SEE ALSO
.PP
Project homepage: <https://github.com/majewsky/xmpp-bridge> - Grab the code,
report issues and send pull requests over there.
